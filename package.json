{
  "name": "markdown-toc",
  "description": "Generate a markdown TOC (table of contents) with Remarkable.",
  "version": "0.12.12",
  "homepage": "https://github.com/jonschlinkert/markdown-toc",
  "author": {
    "name": "Jon Schlinkert",
    "url": "https://github.com/jonschlinkert"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/jonschlinkert/markdown-toc.git"
  },
  "bugs": {
    "url": "https://github.com/jonschlinkert/markdown-toc/issues"
  },
  "license": "MIT",
  "files": [
    "cli.js",
    "index.js",
    "lib"
  ],
  "main": "index.js",
  "bin": {
    "markdown-toc": "cli.js"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "scripts": {
    "test": "mocha"
  },
  "dependencies": {
    "concat-stream": "^1.5.1",
    "gray-matter": "^2.0.2",
    "lazy-cache": "^2.0.1",
    "line-number": "^0.1.0",
    "list-item": "^1.1.1",
    "markdown-link": "^0.1.1",
    "minimist": "^1.2.0",
    "mixin-deep": "^1.1.3",
    "object.pick": "^1.1.2",
    "remarkable": "^1.6.2",
    "repeat-string": "^1.5.4",
    "strip-color": "^0.1.0"
  },
  "devDependencies": {
    "gulp-format-md": "^0.1.7",
    "mocha": "^2.4.5",
    "should": "^8.2.2"
  },
  "keywords": [
    "anchor",
    "commonmark",
    "docs",
    "document",
    "documentation",
    "glossary",
    "heading",
    "index",
    "links",
    "markdown",
    "md",
    "plugin",
    "readme",
    "reference",
    "remarkable",
    "remarkableplugin",
    "render",
    "renderer",
    "table",
    "table of contents",
    "table-of-contents",
    "toc",
    "write"
  ],
  "verb": {
    "run": true,
    "toc": true,
    "layout": "default",
    "tasks": [
      "readme"
    ],
    "plugins": [
      "gulp-format-md"
    ],
    "related": {
      "list": [
        "gfm-code-blocks",
        "markdown-link",
        "markdown-utils",
        "pretty-remarkable",
        "remarkable"
      ]
    },
    "reflinks": [
      "gfm-code-blocks",
      "markdown-link",
      "markdown-utils",
      "pretty-remarkable",
      "remarkable",
      "verb"
    ],
    "lint": {
      "reflinks": true
    }
  },
  "directories": {
    "test": "test"
  },
  "readme": "# markdown-toc [![NPM version](https://img.shields.io/npm/v/markdown-toc.svg?style=flat)](https://www.npmjs.com/package/markdown-toc) [![NPM downloads](https://img.shields.io/npm/dm/markdown-toc.svg?style=flat)](https://npmjs.org/package/markdown-toc) [![Build Status](https://img.shields.io/travis/jonschlinkert/markdown-toc.svg?style=flat)](https://travis-ci.org/jonschlinkert/markdown-toc)\n\nGenerate a markdown TOC (table of contents) with Remarkable.\n\n## TOC\n\n- [Install](#install)\n- [CLI](#cli)\n- [Highights](#highights)\n- [Usage](#usage)\n- [API](#api)\n- [toc.plugin](#tocplugin)\n  * [toc.json](#tocjson)\n  * [toc.insert](#tocinsert)\n  * [Utility functions](#utility-functions)\n- [Options](#options)\n  * [options.append](#optionsappend)\n  * [options.filter](#optionsfilter)\n  * [options.slugify](#optionsslugify)\n  * [options.bullets](#optionsbullets)\n  * [options.maxdepth](#optionsmaxdepth)\n  * [options.firsth1](#optionsfirsth1)\n- [Related projects](#related-projects)\n- [Contributing](#contributing)\n- [Building docs](#building-docs)\n- [Running tests](#running-tests)\n- [Author](#author)\n- [License](#license)\n\n_(TOC generated by [verb](https://github.com/verbose/verb) using [markdown-toc](https://github.com/jonschlinkert/markdown-toc))_\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install markdown-toc --save\n```\n\n## CLI\n\n```\nUsage: markdown-toc [--json] [-i] <input>\n\n  input:  The markdown file to parse for table of contents,\n          or \"-\" to read from stdin.\n\n  --json: Print the TOC in json format\n\n  -i:     Edit the <input> file directly, injecting the TOC at <!-- toc -->\n          (Without this flag, the default is to print the TOC to stdout.)\n```\n\n## Highights\n\n**Features**\n\n* Can optionally be used as a [remarkable](https://github.com/jonschlinkert/remarkable) plugin\n* Returns an object with the rendered TOC (on `content`), as well as a `json` property with the raw TOC object, so you can generate your own TOC using templates or however you want\n* Works with [repeated headings](https://gist.github.com/jonschlinkert/ac5d8122bfaaa394f896)\n* Uses sane defaults, so no customization is necessary, but you can if you need to.\n* [filter](#filter-headings) out headings you don't want\n* [Improve](#titleize) the headings you do want\n* Use a custom [slugify](#optionsslugify) function to change how links are created\n\n**Safe!**\n\n* Won't mangle markdown in code examples in gfm code blocks that other TOC generators mistake as being actual headings (this happens when markdown headings are show in _examples_, meaning they arent' actually headings that should be in the toc. Also happens with yaml and coffee-script comments, or any comments that use `#`)\n* Won't mangle front-matter, or mistake front-matter properties for headings like other TOC generators\n\n## Usage\n\n```js\nvar toc = require('markdown-toc');\n\ntoc('# One\\n\\n# Two').content;\n// Results in:\n// - [One](#one)\n// - [Two](#two)\n```\n\nTo allow customization of the output, an object is returned with the following properties:\n\n* `content` **{String}**: The generated table of contents. Unless you want to customize rendering, this is all you need.\n* `highest` **{Number}**: The highest level heading found. This is used to adjust indentation.\n* `tokens` **{Array}**: Headings tokens that can be used for custom rendering\n\n## toc.plugin\n\nUse as a [remarkable](https://github.com/jonschlinkert/remarkable) plugin.\n\n```js\nvar Remarkable = require('remarkable');\nvar toc = require('markdown-toc');\n\nfunction render(str, options) {\n  return new utils.Remarkable()\n    .use(toc.plugin(options)) // <= register the plugin\n    .render(str);\n}\n```\n\n**Usage example**\n\n```js\nvar results = render('# AAA\\n# BBB\\n# CCC\\nfoo\\nbar\\nbaz');\n```\n\nResults in:\n\n```markdown\n- [AAA](#aaa)\n- [BBB](#bbb)\n- [CCC](#ccc)\n```\n\n### toc.json\n\nObject for creating a custom TOC.\n\n```js\ntoc('# AAA\\n## BBB\\n### CCC\\nfoo').json;\n\n// results in\n[ { content: 'AAA', slug: 'aaa', lvl: 1 },\n  { content: 'BBB', slug: 'bbb', lvl: 2 },\n  { content: 'CCC', slug: 'ccc', lvl: 3 } ]\n```\n\n### toc.insert\n\nInsert a table of contents immediately after an _opening_ `<!-- toc -->` code comment, or replace an existing TOC if both an _opening_ comment and a _closing_ comment (`<!-- tocstop -->`) are found.\n\n_(This strategy works well since code comments in markdown are hidden when viewed as HTML, like when viewing a README on GitHub README for example)._\n\n**Example**\n\n```markdown\n<!-- toc -->\n- old toc 1\n- old toc 2\n- old toc 3\n<!-- tocstop -->\n\n## abc\nThis is a b c.\n\n## xyz\nThis is x y z.\n```\n\nWould result in something like:\n\n```markdown\n<!-- toc -->\n- [abc](#abc)\n- [xyz](#xyz)\n<!-- tocstop -->\n\n## abc\nThis is a b c.\n\n## xyz\nThis is x y z.\n```\n\n### Utility functions\n\nAs a convenience to folks who wants to create a custom TOC, markdown-toc's internal utility methods are exposed:\n\n```js\nvar toc = require('markdown-toc');\n```\n\n* `toc.bullets()`: render a bullet list from an array of tokens\n* `toc.linkify()`: linking a heading `content` string\n* `toc.slugify()`: slugify a heading `content` string\n* `toc.strip()`: strip words or characters from a heading `content` string\n\n**Example**\n\n```js\nvar result = toc('# AAA\\n## BBB\\n### CCC\\nfoo');\nvar str = '';\n\nresult.json.forEach(function(heading) {\n  str += toc.linkify(heading.content);\n});\n```\n\n## Options\n\n### options.append\n\nAppend a string to the end of the TOC.\n\n```js\ntoc(str, {append: '\\n_(TOC generated by Verb)_'});\n```\n\n### options.filter\n\nType: `Function`\n\nDefault: `undefined`\n\nParams:\n\n* `str` **{String}** the actual heading string\n* `ele` **{Objecct}** object of heading tokens\n* `arr` **{Array}** all of the headings objects\n\n**Example**\n\nFrom time to time, we might get junk like this in our TOC.\n\n```markdown\n[.aaa([foo], ...) another bad heading](#-aaa--foo--------another-bad-heading)\n```\n\nUnless you like that kind of thing, you might want to filter these bad headings out.\n\n```js\nfunction removeJunk(str, ele, arr) {\n  return str.indexOf('...') === -1;\n}\n\nvar result = toc(str, {filter: removeJunk});\n//=> beautiful TOC\n```\n\n### options.slugify\n\nType: `Function`\n\nDefault: Basic non-word character replacement.\n\n**Example**\n\n```js\nvar str = toc('# Some Article', {slugify: require('uslug')});\n```\n\n### options.bullets\n\nType: `String|Array`\n\nDefault: `*`\n\nThe bullet to use for each item in the generated TOC. If passed as an array (`['*', '-', '+']`), the bullet point strings will be used based on the header depth.\n\n### options.maxdepth\n\nType: `Number`\n\nDefault: `6`\n\nUse headings whose depth is at most maxdepth.\n\n### options.firsth1\n\nType: `Boolean`\n\nDefault: `true`\n\nExclude the first h1-level heading in a file. For example, this prevents the first heading in a README from showing up in the TOC.\n\n## Related projects\n\nYou might also be interested in these projects:\n\n* [gfm-code-blocks](https://www.npmjs.com/package/gfm-code-blocks): Extract gfm (GitHub Flavored Markdown) fenced code blocks from a string. | [homepage](https://github.com/jonschlinkert/gfm-code-blocks)\n* [markdown-link](https://www.npmjs.com/package/markdown-link): Micro util for generating a single markdown link. | [homepage](https://github.com/jonschlinkert/markdown-link)\n* [markdown-utils](https://www.npmjs.com/package/markdown-utils): Micro-utils for creating markdown snippets. | [homepage](https://github.com/jonschlinkert/markdown-utils)\n* [pretty-remarkable](https://www.npmjs.com/package/pretty-remarkable): Plugin for prettifying markdown with Remarkable using custom renderer rules. | [homepage](https://github.com/jonschlinkert/pretty-remarkable)\n* [remarkable](https://www.npmjs.com/package/remarkable): Markdown parser, done right. 100% Commonmark support, extensions, syntax plugins, high speed - all in… [more](https://www.npmjs.com/package/remarkable) | [homepage](https://github.com/jonschlinkert/remarkable)\n\n## Contributing\n\nThis document was generated by [verb](https://github.com/verbose/verb), please don't edit directly. Any changes to the readme must be made in [.verb.md](.verb.md). See [Building Docs](#building-docs).\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](https://github.com/jonschlinkert/markdown-toc/issues/new).\n\n## Building docs\n\nGenerate readme and API documentation with [verb](https://github.com/verbose/verb):\n\n```sh\n$ npm install verb && npm run docs\n```\n\nOr, if [verb](https://github.com/verbose/verb) is installed globally:\n\n```sh\n$ verb\n```\n\n## Running tests\n\nInstall dev dependencies:\n\n```sh\n$ npm install -d && npm test\n```\n\n## Author\n\n**Jon Schlinkert**\n\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](http://twitter.com/jonschlinkert)\n\n## License\n\nCopyright © 2016, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT license](https://github.com/jonschlinkert/markdown-toc/blob/master/LICENSE).\n\n***\n\n_This file was generated by [verb](https://github.com/verbose/verb), v0.9.0, on May 27, 2016._",
  "readmeFilename": "README.md",
  "_id": "markdown-toc@0.12.12",
  "_shasum": "94829c11c77a389e630663567b705639a49a0d5e",
  "_resolved": "https://github.com/kcyarn/markdown-toc/tarball/master",
  "_from": "https://github.com/kcyarn/markdown-toc/tarball/master"
}
